// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/goods/goods.proto

package goods

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Barcode struct {
	BarCode     string `protobuf:"bytes,1,opt,name=BarCode,proto3" json:"BarCode,omitempty"`
	PluCode     string `protobuf:"bytes,2,opt,name=PluCode,proto3" json:"PluCode,omitempty"`
	DepCode     string `protobuf:"bytes,3,opt,name=DepCode,proto3" json:"DepCode,omitempty"`
	PluName     string `protobuf:"bytes,4,opt,name=PluName,proto3" json:"PluName,omitempty"`
	PluAbbrName string `protobuf:"bytes,5,opt,name=PluAbbrName,proto3" json:"PluAbbrName,omitempty"`
	Spec        string `protobuf:"bytes,6,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (m *Barcode) Reset()         { *m = Barcode{} }
func (m *Barcode) String() string { return proto.CompactTextString(m) }
func (*Barcode) ProtoMessage()    {}
func (*Barcode) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ff7bf58be59df1, []int{0}
}
func (m *Barcode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Barcode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Barcode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Barcode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Barcode.Merge(m, src)
}
func (m *Barcode) XXX_Size() int {
	return m.Size()
}
func (m *Barcode) XXX_DiscardUnknown() {
	xxx_messageInfo_Barcode.DiscardUnknown(m)
}

var xxx_messageInfo_Barcode proto.InternalMessageInfo

func (m *Barcode) GetBarCode() string {
	if m != nil {
		return m.BarCode
	}
	return ""
}

func (m *Barcode) GetPluCode() string {
	if m != nil {
		return m.PluCode
	}
	return ""
}

func (m *Barcode) GetDepCode() string {
	if m != nil {
		return m.DepCode
	}
	return ""
}

func (m *Barcode) GetPluName() string {
	if m != nil {
		return m.PluName
	}
	return ""
}

func (m *Barcode) GetPluAbbrName() string {
	if m != nil {
		return m.PluAbbrName
	}
	return ""
}

func (m *Barcode) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

type Goods struct {
	PluCode       string     `protobuf:"bytes,1,opt,name=PluCode,proto3" json:"PluCode,omitempty"`
	PluName       string     `protobuf:"bytes,2,opt,name=PluName,proto3" json:"PluName,omitempty"`
	BarCode       string     `protobuf:"bytes,3,opt,name=BarCode,proto3" json:"BarCode,omitempty"`
	Unit          string     `protobuf:"bytes,4,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Spec          string     `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
	Weigt         string     `protobuf:"bytes,6,opt,name=Weigt,proto3" json:"Weigt,omitempty"`
	DepCode       string     `protobuf:"bytes,7,opt,name=DepCode,proto3" json:"DepCode,omitempty"`
	Produce       string     `protobuf:"bytes,8,opt,name=Produce,proto3" json:"Produce,omitempty"`
	Grade         string     `protobuf:"bytes,9,opt,name=Grade,proto3" json:"Grade,omitempty"`
	SupCode       string     `protobuf:"bytes,10,opt,name=SupCode,proto3" json:"SupCode,omitempty"`
	ClsCode       string     `protobuf:"bytes,11,opt,name=ClsCode,proto3" json:"ClsCode,omitempty"`
	BrandCode     string     `protobuf:"bytes,12,opt,name=BrandCode,proto3" json:"BrandCode,omitempty"`
	HJPrice       string     `protobuf:"bytes,13,opt,name=HJPrice,proto3" json:"HJPrice,omitempty"`
	WJPrice       string     `protobuf:"bytes,14,opt,name=WJPrice,proto3" json:"WJPrice,omitempty"`
	SPrice        string     `protobuf:"bytes,15,opt,name=SPrice,proto3" json:"SPrice,omitempty"`
	HyPrice       string     `protobuf:"bytes,16,opt,name=HyPrice,proto3" json:"HyPrice,omitempty"`
	PfPrice       string     `protobuf:"bytes,17,opt,name=PfPrice,proto3" json:"PfPrice,omitempty"`
	JTaxRate      string     `protobuf:"bytes,18,opt,name=JTaxRate,proto3" json:"JTaxRate,omitempty"`
	XTaxRate      string     `protobuf:"bytes,19,opt,name=XTaxRate,proto3" json:"XTaxRate,omitempty"`
	CgyCode       string     `protobuf:"bytes,20,opt,name=CgyCode,proto3" json:"CgyCode,omitempty"`
	CgyName       string     `protobuf:"bytes,21,opt,name=CgyName,proto3" json:"CgyName,omitempty"`
	XgDate        string     `protobuf:"bytes,22,opt,name=XgDate,proto3" json:"XgDate,omitempty"`
	LrDate        string     `protobuf:"bytes,23,opt,name=LrDate,proto3" json:"LrDate,omitempty"`
	UserCode      string     `protobuf:"bytes,24,opt,name=UserCode,proto3" json:"UserCode,omitempty"`
	UserName      string     `protobuf:"bytes,25,opt,name=UserName,proto3" json:"UserName,omitempty"`
	PackPriceType string     `protobuf:"bytes,26,opt,name=PackPriceType,proto3" json:"PackPriceType,omitempty"`
	PackPriceRate string     `protobuf:"bytes,27,opt,name=PackPriceRate,proto3" json:"PackPriceRate,omitempty"`
	PluStatus     string     `protobuf:"bytes,28,opt,name=PluStatus,proto3" json:"PluStatus,omitempty"`
	Barcodes      []*Barcode `protobuf:"bytes,29,rep,name=Barcodes,proto3" json:"Barcodes,omitempty"`
}

func (m *Goods) Reset()         { *m = Goods{} }
func (m *Goods) String() string { return proto.CompactTextString(m) }
func (*Goods) ProtoMessage()    {}
func (*Goods) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ff7bf58be59df1, []int{1}
}
func (m *Goods) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Goods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Goods.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Goods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Goods.Merge(m, src)
}
func (m *Goods) XXX_Size() int {
	return m.Size()
}
func (m *Goods) XXX_DiscardUnknown() {
	xxx_messageInfo_Goods.DiscardUnknown(m)
}

var xxx_messageInfo_Goods proto.InternalMessageInfo

func (m *Goods) GetPluCode() string {
	if m != nil {
		return m.PluCode
	}
	return ""
}

func (m *Goods) GetPluName() string {
	if m != nil {
		return m.PluName
	}
	return ""
}

func (m *Goods) GetBarCode() string {
	if m != nil {
		return m.BarCode
	}
	return ""
}

func (m *Goods) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Goods) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

func (m *Goods) GetWeigt() string {
	if m != nil {
		return m.Weigt
	}
	return ""
}

func (m *Goods) GetDepCode() string {
	if m != nil {
		return m.DepCode
	}
	return ""
}

func (m *Goods) GetProduce() string {
	if m != nil {
		return m.Produce
	}
	return ""
}

func (m *Goods) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *Goods) GetSupCode() string {
	if m != nil {
		return m.SupCode
	}
	return ""
}

func (m *Goods) GetClsCode() string {
	if m != nil {
		return m.ClsCode
	}
	return ""
}

func (m *Goods) GetBrandCode() string {
	if m != nil {
		return m.BrandCode
	}
	return ""
}

func (m *Goods) GetHJPrice() string {
	if m != nil {
		return m.HJPrice
	}
	return ""
}

func (m *Goods) GetWJPrice() string {
	if m != nil {
		return m.WJPrice
	}
	return ""
}

func (m *Goods) GetSPrice() string {
	if m != nil {
		return m.SPrice
	}
	return ""
}

func (m *Goods) GetHyPrice() string {
	if m != nil {
		return m.HyPrice
	}
	return ""
}

func (m *Goods) GetPfPrice() string {
	if m != nil {
		return m.PfPrice
	}
	return ""
}

func (m *Goods) GetJTaxRate() string {
	if m != nil {
		return m.JTaxRate
	}
	return ""
}

func (m *Goods) GetXTaxRate() string {
	if m != nil {
		return m.XTaxRate
	}
	return ""
}

func (m *Goods) GetCgyCode() string {
	if m != nil {
		return m.CgyCode
	}
	return ""
}

func (m *Goods) GetCgyName() string {
	if m != nil {
		return m.CgyName
	}
	return ""
}

func (m *Goods) GetXgDate() string {
	if m != nil {
		return m.XgDate
	}
	return ""
}

func (m *Goods) GetLrDate() string {
	if m != nil {
		return m.LrDate
	}
	return ""
}

func (m *Goods) GetUserCode() string {
	if m != nil {
		return m.UserCode
	}
	return ""
}

func (m *Goods) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *Goods) GetPackPriceType() string {
	if m != nil {
		return m.PackPriceType
	}
	return ""
}

func (m *Goods) GetPackPriceRate() string {
	if m != nil {
		return m.PackPriceRate
	}
	return ""
}

func (m *Goods) GetPluStatus() string {
	if m != nil {
		return m.PluStatus
	}
	return ""
}

func (m *Goods) GetBarcodes() []*Barcode {
	if m != nil {
		return m.Barcodes
	}
	return nil
}

type ListQuery struct {
	Limit int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort  string `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Where string `protobuf:"bytes,4,opt,name=where,proto3" json:"where,omitempty"`
}

func (m *ListQuery) Reset()         { *m = ListQuery{} }
func (m *ListQuery) String() string { return proto.CompactTextString(m) }
func (*ListQuery) ProtoMessage()    {}
func (*ListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ff7bf58be59df1, []int{2}
}
func (m *ListQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListQuery.Merge(m, src)
}
func (m *ListQuery) XXX_Size() int {
	return m.Size()
}
func (m *ListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListQuery proto.InternalMessageInfo

func (m *ListQuery) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListQuery) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListQuery) GetSort() string {
	if m != nil {
		return m.Sort
	}
	return ""
}

func (m *ListQuery) GetWhere() string {
	if m != nil {
		return m.Where
	}
	return ""
}

type Request struct {
	ListQuery *ListQuery `protobuf:"bytes,1,opt,name=list_query,json=listQuery,proto3" json:"list_query,omitempty"`
	Goods     *Goods     `protobuf:"bytes,2,opt,name=goods,proto3" json:"goods,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ff7bf58be59df1, []int{3}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetListQuery() *ListQuery {
	if m != nil {
		return m.ListQuery
	}
	return nil
}

func (m *Request) GetGoods() *Goods {
	if m != nil {
		return m.Goods
	}
	return nil
}

type Response struct {
	Valid  bool     `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Total  int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Goods  *Goods   `protobuf:"bytes,3,opt,name=goods,proto3" json:"goods,omitempty"`
	Goodss []*Goods `protobuf:"bytes,4,rep,name=goodss,proto3" json:"goodss,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_42ff7bf58be59df1, []int{4}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *Response) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Response) GetGoods() *Goods {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *Response) GetGoodss() []*Goods {
	if m != nil {
		return m.Goodss
	}
	return nil
}

func init() {
	proto.RegisterType((*Barcode)(nil), "goods.Barcode")
	proto.RegisterType((*Goods)(nil), "goods.Goods")
	proto.RegisterType((*ListQuery)(nil), "goods.ListQuery")
	proto.RegisterType((*Request)(nil), "goods.Request")
	proto.RegisterType((*Response)(nil), "goods.Response")
}

func init() { proto.RegisterFile("proto/goods/goods.proto", fileDescriptor_42ff7bf58be59df1) }

var fileDescriptor_42ff7bf58be59df1 = []byte{
	// 647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0xc7, 0x63, 0x92, 0x98, 0x64, 0xc2, 0xbf, 0xdf, 0xfe, 0x28, 0x6c, 0x29, 0x8d, 0x90, 0xc5,
	0x81, 0xf6, 0x00, 0x52, 0x78, 0x82, 0x02, 0x12, 0x15, 0x42, 0x95, 0xeb, 0x80, 0xe0, 0x54, 0x64,
	0xe2, 0x6d, 0x6a, 0xd5, 0x60, 0xe3, 0x5d, 0xb7, 0xcd, 0xad, 0x8f, 0xd0, 0x6b, 0x9f, 0xa0, 0xaf,
	0xd2, 0x23, 0xc7, 0x1e, 0x2b, 0xf2, 0x22, 0xd5, 0xce, 0x8c, 0x9d, 0xa4, 0xa8, 0x97, 0x68, 0xbf,
	0xf3, 0x99, 0x9d, 0x99, 0x6f, 0xec, 0x31, 0xac, 0x67, 0x79, 0x6a, 0xd2, 0xbd, 0x61, 0x9a, 0x46,
	0x9a, 0x7e, 0x77, 0x31, 0x22, 0x9a, 0x28, 0xbc, 0x1f, 0x0e, 0xcc, 0x1f, 0x84, 0xf9, 0x20, 0x8d,
	0x94, 0x90, 0x78, 0x3c, 0x4c, 0x23, 0x25, 0x9d, 0x2d, 0x67, 0xa7, 0x1d, 0x94, 0xd2, 0x12, 0x3f,
	0x29, 0x90, 0xcc, 0x11, 0x61, 0x69, 0xc9, 0x91, 0xca, 0x90, 0xd4, 0x89, 0xb0, 0xe4, 0x3b, 0x6f,
	0xc2, 0x1b, 0x25, 0x1b, 0xd5, 0x1d, 0x2b, 0xc5, 0x16, 0x74, 0xfc, 0xa4, 0x78, 0x75, 0x7d, 0x9d,
	0x23, 0x6d, 0x22, 0x9d, 0x0e, 0x09, 0x01, 0x8d, 0x7e, 0xa6, 0x06, 0xd2, 0x45, 0x84, 0x67, 0xef,
	0xbb, 0x0b, 0xcd, 0x63, 0x3b, 0xf3, 0xf4, 0x34, 0xce, 0xa3, 0x69, 0xca, 0x9e, 0x73, 0xb3, 0x3d,
	0xa7, 0xbc, 0xd5, 0x67, 0xbd, 0x09, 0x68, 0x9c, 0xdf, 0xc6, 0x86, 0x87, 0xc4, 0x73, 0xd5, 0xbf,
	0x39, 0xe9, 0x2f, 0x56, 0xa1, 0x79, 0xa1, 0xe2, 0xa1, 0xe1, 0xa1, 0x48, 0x4c, 0xfb, 0x9f, 0x7f,
	0xec, 0x3f, 0x4f, 0xa3, 0x62, 0xa0, 0x64, 0x8b, 0x67, 0x21, 0x69, 0x2b, 0x1d, 0xe7, 0x61, 0xa4,
	0x64, 0x9b, 0x2a, 0xa1, 0xb0, 0xf9, 0xfd, 0x82, 0x2a, 0x01, 0xe5, 0xb3, 0xb4, 0xe4, 0x30, 0xd1,
	0x48, 0x3a, 0x44, 0x58, 0x8a, 0x4d, 0x68, 0x1f, 0xe4, 0xe1, 0x6d, 0x84, 0x6c, 0x01, 0xd9, 0x24,
	0x60, 0xef, 0xbd, 0x3e, 0xf1, 0xf3, 0x78, 0xa0, 0xe4, 0x22, 0xdd, 0x63, 0x69, 0xc9, 0x05, 0x93,
	0x25, 0x22, 0x2c, 0xc5, 0x1a, 0xb8, 0x7d, 0x02, 0xcb, 0x08, 0x58, 0x61, 0xad, 0x11, 0x81, 0x15,
	0xae, 0x35, 0xaa, 0x88, 0xff, 0x9e, 0xc8, 0x7f, 0xec, 0x93, 0xa4, 0xd8, 0x80, 0xd6, 0xc9, 0x59,
	0xf8, 0x25, 0x08, 0x8d, 0x92, 0x02, 0x51, 0xa5, 0x2d, 0xbb, 0x2c, 0xd9, 0xff, 0xc4, 0x4a, 0x8d,
	0x7e, 0x87, 0x23, 0xf4, 0xb4, 0xca, 0x7e, 0x49, 0x32, 0xc1, 0xe7, 0xfb, 0xa4, 0x22, 0xf8, 0x7c,
	0xd7, 0xc0, 0xbd, 0x1c, 0x1e, 0xd9, 0x6a, 0x6b, 0x34, 0x37, 0x29, 0x1b, 0x3f, 0xcd, 0x31, 0xbe,
	0x4e, 0x71, 0x52, 0xb6, 0xff, 0xb9, 0x56, 0xf4, 0x42, 0x48, 0xea, 0x5f, 0xea, 0x92, 0x61, 0x9b,
	0xa7, 0x13, 0x86, 0x7d, 0xb6, 0x61, 0xd1, 0x0f, 0x07, 0x1f, 0xd1, 0xe0, 0xd9, 0x28, 0x53, 0x72,
	0x03, 0x13, 0x66, 0x83, 0x33, 0x59, 0x68, 0xf1, 0xd9, 0x5f, 0x59, 0xe8, 0x73, 0x13, 0xda, 0x7e,
	0x52, 0xf4, 0x4d, 0x68, 0x0a, 0x2d, 0x37, 0xe9, 0xe9, 0x55, 0x01, 0xf1, 0x12, 0x5a, 0xbc, 0x98,
	0x5a, 0x3e, 0xdf, 0xaa, 0xef, 0x74, 0x7a, 0x4b, 0xbb, 0xb4, 0xc0, 0x1c, 0x0e, 0x2a, 0xee, 0x5d,
	0x41, 0xfb, 0x34, 0xd6, 0xe6, 0x6d, 0xa1, 0xf2, 0x91, 0x7d, 0xbd, 0x92, 0xf8, 0x26, 0x36, 0xb8,
	0x1c, 0xf5, 0x80, 0x84, 0x7d, 0xa5, 0xb3, 0x70, 0x48, 0x7b, 0x51, 0x0f, 0xf0, 0x6c, 0x63, 0x3a,
	0xcd, 0x0d, 0x6f, 0x04, 0x9e, 0xed, 0xed, 0xcf, 0x1f, 0x54, 0x5e, 0x2e, 0x2d, 0x09, 0xef, 0x1d,
	0xcc, 0x07, 0xea, 0xae, 0x50, 0xda, 0x88, 0x3d, 0x80, 0x24, 0xd6, 0xe6, 0xea, 0xce, 0x36, 0xc3,
	0x1e, 0x9d, 0xde, 0x0a, 0x4f, 0x56, 0x0d, 0x11, 0xb4, 0x93, 0x6a, 0x1e, 0x0f, 0xe8, 0x5b, 0x83,
	0xad, 0x3b, 0xbd, 0x05, 0xce, 0xc5, 0x5d, 0x0e, 0xf8, 0x33, 0xf4, 0xd5, 0x81, 0x56, 0xa0, 0x74,
	0x96, 0xde, 0x6a, 0xdc, 0x8f, 0x4f, 0x61, 0x12, 0x47, 0x58, 0xbc, 0x15, 0x90, 0xb0, 0x51, 0x93,
	0x9a, 0x30, 0x61, 0x07, 0x24, 0x26, 0xc5, 0xeb, 0xff, 0x2c, 0x2e, 0xb6, 0xc1, 0xc5, 0x83, 0x96,
	0x0d, 0xfc, 0x1f, 0x67, 0x93, 0x98, 0xf5, 0xf6, 0xc1, 0xc5, 0x80, 0x16, 0x2f, 0xa0, 0x61, 0x8d,
	0x88, 0xf2, 0xff, 0x66, 0xe7, 0x1b, 0xcb, 0x95, 0xa6, 0x41, 0xbd, 0xda, 0x81, 0xfc, 0xf9, 0xd0,
	0x75, 0xee, 0x1f, 0xba, 0xce, 0xef, 0x87, 0xae, 0xf3, 0x6d, 0xdc, 0xad, 0xdd, 0x8f, 0xbb, 0xb5,
	0x5f, 0xe3, 0x6e, 0xed, 0xda, 0xc5, 0xcf, 0xec, 0xfe, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0,
	0xc3, 0x77, 0xa5, 0x81, 0x05, 0x00, 0x00,
}

func (m *Barcode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Barcode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Barcode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spec) > 0 {
		i -= len(m.Spec)
		copy(dAtA[i:], m.Spec)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.Spec)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PluAbbrName) > 0 {
		i -= len(m.PluAbbrName)
		copy(dAtA[i:], m.PluAbbrName)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.PluAbbrName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PluName) > 0 {
		i -= len(m.PluName)
		copy(dAtA[i:], m.PluName)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.PluName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DepCode) > 0 {
		i -= len(m.DepCode)
		copy(dAtA[i:], m.DepCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.DepCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PluCode) > 0 {
		i -= len(m.PluCode)
		copy(dAtA[i:], m.PluCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.PluCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BarCode) > 0 {
		i -= len(m.BarCode)
		copy(dAtA[i:], m.BarCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.BarCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Goods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Goods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Goods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Barcodes) > 0 {
		for iNdEx := len(m.Barcodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Barcodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGoods(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
	}
	if len(m.PluStatus) > 0 {
		i -= len(m.PluStatus)
		copy(dAtA[i:], m.PluStatus)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.PluStatus)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if len(m.PackPriceRate) > 0 {
		i -= len(m.PackPriceRate)
		copy(dAtA[i:], m.PackPriceRate)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.PackPriceRate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.PackPriceType) > 0 {
		i -= len(m.PackPriceType)
		copy(dAtA[i:], m.PackPriceType)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.PackPriceType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.UserName) > 0 {
		i -= len(m.UserName)
		copy(dAtA[i:], m.UserName)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.UserName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.UserCode) > 0 {
		i -= len(m.UserCode)
		copy(dAtA[i:], m.UserCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.UserCode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.LrDate) > 0 {
		i -= len(m.LrDate)
		copy(dAtA[i:], m.LrDate)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.LrDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.XgDate) > 0 {
		i -= len(m.XgDate)
		copy(dAtA[i:], m.XgDate)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.XgDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.CgyName) > 0 {
		i -= len(m.CgyName)
		copy(dAtA[i:], m.CgyName)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.CgyName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.CgyCode) > 0 {
		i -= len(m.CgyCode)
		copy(dAtA[i:], m.CgyCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.CgyCode)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.XTaxRate) > 0 {
		i -= len(m.XTaxRate)
		copy(dAtA[i:], m.XTaxRate)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.XTaxRate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.JTaxRate) > 0 {
		i -= len(m.JTaxRate)
		copy(dAtA[i:], m.JTaxRate)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.JTaxRate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.PfPrice) > 0 {
		i -= len(m.PfPrice)
		copy(dAtA[i:], m.PfPrice)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.PfPrice)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.HyPrice) > 0 {
		i -= len(m.HyPrice)
		copy(dAtA[i:], m.HyPrice)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.HyPrice)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.SPrice) > 0 {
		i -= len(m.SPrice)
		copy(dAtA[i:], m.SPrice)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.SPrice)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.WJPrice) > 0 {
		i -= len(m.WJPrice)
		copy(dAtA[i:], m.WJPrice)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.WJPrice)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.HJPrice) > 0 {
		i -= len(m.HJPrice)
		copy(dAtA[i:], m.HJPrice)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.HJPrice)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.BrandCode) > 0 {
		i -= len(m.BrandCode)
		copy(dAtA[i:], m.BrandCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.BrandCode)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ClsCode) > 0 {
		i -= len(m.ClsCode)
		copy(dAtA[i:], m.ClsCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.ClsCode)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SupCode) > 0 {
		i -= len(m.SupCode)
		copy(dAtA[i:], m.SupCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.SupCode)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Produce) > 0 {
		i -= len(m.Produce)
		copy(dAtA[i:], m.Produce)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.Produce)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DepCode) > 0 {
		i -= len(m.DepCode)
		copy(dAtA[i:], m.DepCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.DepCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Weigt) > 0 {
		i -= len(m.Weigt)
		copy(dAtA[i:], m.Weigt)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.Weigt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Spec) > 0 {
		i -= len(m.Spec)
		copy(dAtA[i:], m.Spec)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.Spec)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Unit) > 0 {
		i -= len(m.Unit)
		copy(dAtA[i:], m.Unit)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.Unit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BarCode) > 0 {
		i -= len(m.BarCode)
		copy(dAtA[i:], m.BarCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.BarCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PluName) > 0 {
		i -= len(m.PluName)
		copy(dAtA[i:], m.PluName)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.PluName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PluCode) > 0 {
		i -= len(m.PluCode)
		copy(dAtA[i:], m.PluCode)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.PluCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Where) > 0 {
		i -= len(m.Where)
		copy(dAtA[i:], m.Where)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.Where)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sort) > 0 {
		i -= len(m.Sort)
		copy(dAtA[i:], m.Sort)
		i = encodeVarintGoods(dAtA, i, uint64(len(m.Sort)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Page != 0 {
		i = encodeVarintGoods(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintGoods(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		{
			size, err := m.Goods.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGoods(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ListQuery != nil {
		{
			size, err := m.ListQuery.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGoods(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Goodss) > 0 {
		for iNdEx := len(m.Goodss) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Goodss[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGoods(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Goods != nil {
		{
			size, err := m.Goods.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGoods(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Total != 0 {
		i = encodeVarintGoods(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGoods(dAtA []byte, offset int, v uint64) int {
	offset -= sovGoods(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Barcode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BarCode)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.PluCode)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.DepCode)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.PluName)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.PluAbbrName)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	return n
}

func (m *Goods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PluCode)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.PluName)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.BarCode)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.Unit)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.Spec)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.Weigt)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.DepCode)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.Produce)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.SupCode)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.ClsCode)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.BrandCode)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.HJPrice)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.WJPrice)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.SPrice)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.HyPrice)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.PfPrice)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.JTaxRate)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.XTaxRate)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.CgyCode)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.CgyName)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.XgDate)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.LrDate)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.UserCode)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.PackPriceType)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.PackPriceRate)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	l = len(m.PluStatus)
	if l > 0 {
		n += 2 + l + sovGoods(uint64(l))
	}
	if len(m.Barcodes) > 0 {
		for _, e := range m.Barcodes {
			l = e.Size()
			n += 2 + l + sovGoods(uint64(l))
		}
	}
	return n
}

func (m *ListQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovGoods(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovGoods(uint64(m.Page))
	}
	l = len(m.Sort)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	l = len(m.Where)
	if l > 0 {
		n += 1 + l + sovGoods(uint64(l))
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListQuery != nil {
		l = m.ListQuery.Size()
		n += 1 + l + sovGoods(uint64(l))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovGoods(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	if m.Total != 0 {
		n += 1 + sovGoods(uint64(m.Total))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovGoods(uint64(l))
	}
	if len(m.Goodss) > 0 {
		for _, e := range m.Goodss {
			l = e.Size()
			n += 1 + l + sovGoods(uint64(l))
		}
	}
	return n
}

func sovGoods(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGoods(x uint64) (n int) {
	return sovGoods(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Barcode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Barcode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Barcode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BarCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluAbbrName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluAbbrName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Goods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Goods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Goods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BarCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BarCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spec = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weigt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weigt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Produce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Produce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClsCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClsCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BrandCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BrandCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HJPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HJPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WJPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WJPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HyPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HyPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PfPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PfPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JTaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JTaxRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XTaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XTaxRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgyCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CgyCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CgyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XgDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XgDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LrDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LrDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackPriceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackPriceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackPriceRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PackPriceRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Barcodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Barcodes = append(m.Barcodes, &Barcode{})
			if err := m.Barcodes[len(m.Barcodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Where", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Where = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListQuery == nil {
				m.ListQuery = &ListQuery{}
			}
			if err := m.ListQuery.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &Goods{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &Goods{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goodss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoods
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Goodss = append(m.Goodss, &Goods{})
			if err := m.Goodss[len(m.Goodss)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGoods(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGoods
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGoods
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGoods
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGoods        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGoods          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGoods = fmt.Errorf("proto: unexpected end of group")
)
